version: '3.9'
services:
  db:
    image: postgres:16.2
    container_name: db
    restart: always
    volumes:
      - data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ninmu
      MINIO_ROOT_PASSWORD: ninmukey
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    command: server /data --console-address ":9001"

  server:
    build: 
      context: ./ninmu-api
      dockerfile: Dockerfile
    container_name: server
    command: sh -c "python3 manage.py makemigrations && python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: always
    volumes:
      - ./ninmu-api:/app/server
    ports:
      - "8000:8000"
    env_file:
      - ./ninmu-api/.env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 60s  
  
  client:
    container_name: client
    build:
      context: ./ninmu-frontend #if your Dockerfile is not at the same level change the path here (./frontend)
      dockerfile: Dockerfile
    restart: always
    command: npm run dev
    environment:
      - NODE_ENV=development 
      #if youâ€™re using Windows, you may need to uncomment the next line - Sol from @Kobe E
      #- WATCHPACK_POLLING=true
    volumes:
      - ./ninmu-frontend:/app/client
      - ./ninmu-frontend/node_modules:/app/client/node_modules
      - ./ninmu-frontend/.next:/app/client/.next
    ports:
      - 3000:3000
    env_file:
      - ./ninmu-frontend/.env
    depends_on:
      server:
        condition: service_healthy

volumes:
  minio_data:
  minio_config:
  data:
